% B.Shyrokau
% Template for homework assignment #3
% RO47017 Vehicle Dynamics & Control
% Use and distribution of this material outside the RO47017 course 
% only with the permission of the course coordinator

clc; clear all; close all; clear mex;

% controller settings
Ts = 0.01;	% controller frequency

% vehicle parameters (bicycle model)
veh_parameters;

%% ACADO set up 
DifferentialState y y_dot psi psi_dot delta; % definition of controller states
Control delta_dot; % definition of controller input
% controller model of the plant
Ct = par.Caf + par.Car;
Cs = par.l_f*par.Caf - par.l_r*par.Car;
Vx = V_ref;
Cq2 = par.l_f^2*par.Caf + par.l_r^2*par.Car;
f_ctrl = [
    dot(y)  == y_dot;...
    dot(y_dot) == -Ct/(par.mass*Vx)*y_dot + Ct/par.mass*psi - Cs/(par.mass*Vx)*psi_dot + par.Caf/par.mass*delta;...
    dot(psi)  == psi_dot;...
    dot(psi_dot) == - Cs/(par.Izz*Vx)*y_dot + Cs/par.Izz*psi - Cq2/(par.Izz*Vx)*psi_dot + par.l_f*par.Caf/par.Izz*delta;...
    dot(delta) == delta_dot];


%% ACADO: controller formulation
acadoSet('problemname', 'PF_problem');
Np = 40;                                  % prediction horizon
ocp  = acado.OCP( 0.0, Np*Ts, Np);        % ACADO ocp

% Residual function definition based on ACADO
h = [diffStates ; controls];
hN = [diffStates];                       % terminal

% Initialization weights
W = acado.BMatrix(eye(length(h)));
WN = acado.BMatrix(eye(length(hN)));     % terminal

% Cost definition
ocp.minimizeLSQ(W,h);
ocp.minimizeLSQEndTerm(WN,hN);           % terminal

% Constraints definition
delta_bound   = 2*pi/par.i_steer;	 % absolute steering position [rad]
                                 % bound on the angle of wheels for 360deg rotation of the steering wheel    
delta_dot_bound = 800*pi/180/par.i_steer; % [rad/s]
                                 
% constraints in ACADO 
ocp.subjectTo(-delta_dot_bound <= delta_dot <= delta_dot_bound);
ocp.subjectTo(-delta_bound <= delta <= delta_bound);

% define ACADO prediction model
ocp.setModel(f_ctrl);
    
% ACADO settings [Don't change these settings in your HMA]
mpc = acado.OCPexport( ocp );
mpc.set('HESSIAN_APPROXIMATION', 'GAUSS_NEWTON');       % solving algorithm
mpc.set('DISCRETIZATION_TYPE', 'MULTIPLE_SHOOTING');    % discretization algorithm
mpc.set('INTEGRATOR_TYPE', 'INT_IRK_GL2');              % intergation algorithm
mpc.set('NUM_INTEGRATOR_STEPS', 3*Np);                  % number of integration steps
mpc.set('LEVENBERG_MARQUARDT', 1e-4);                   % value for Levenberg-Marquardt regularization -> affects performance
mpc.set('SPARSE_QP_SOLUTION', 'FULL_CONDENSING_N2');
mpc.set('QP_SOLVER', 'QP_QPOASES3');
mpc.set('MAX_NUM_QP_ITERATIONS', 20) ;
mpc.set('HOTSTART_QP','YES');
mpc.set('GENERATE_SIMULINK_INTERFACE', 'YES');

%% Export and Compile flags
EXPORT  = 1;
COMPILE = 1;

% export code to the defined folder
if EXPORT
    mpc.exportCode('export_MPC');
end

% compilation of the S-function using autogenerated make script
if COMPILE
    global ACADO_;
    copyfile([ACADO_.pwd '/../../external_packages/qpoases3'], 'export_MPC/qpoases3')
    cd export_MPC
    make_acado_solver_sfunction
    copyfile('acado_solver_sfun.mex*', '../')
    cd ..
end


%% Linear bicycle model
X0       = [0 0 0 0 0];  
% initialize controller bus
input.x  = repmat(X0, Np + 1, 1).';      % size Np + 1
input.od = zeros(Np + 1, 1);            % size Np + 1
Uref     = zeros(Np, 1);
input.u  = Uref.';
input.y  = [repmat(X0, Np, 1) Uref].';   % reference trajectory, size Np + 1
input.yN = X0.';                        % terminal reference, size Np + 1
% redefined in Simulink
input.W  = diag([10 0 0 0 5e-3 1e-1]);     % weight tuning !! Tune them in the Simulink model !!
input.WN = diag([0 0 0 0 0]);             % terminal weight tuning
input.x0 = X0.';
% controller bus initialization
init.x   = input.x(:).';                  % state trajectory
init.u   = input.u(:).';                  % control trajectory
init.y   = input.y(:).';                  % reference trajectory (up to Np - 1)
init.yN  = input.yN(:).';                % terminal reference value (only for Np)
init.W   = input.W(:).';                  % stage cost matrix (up to Np - 1)
init.WN  = input.WN(:).';                % terminal cost matrix (only for Np)
init.x0  = input.x0(:).';                % initial state value

%% Calculate RMSE

% ts_actual = simout1;
% ts_predicted = simout;
% 
% % Convert timeseries to arrays
% actual = ts_actual.Data;
% predicted = ts_predicted.Data;
% 
% % Calculate RMSE
% difference = actual - predicted;
% squaredErrors = difference .^ 2;
% meanSquaredError = mean(squaredErrors);
% rmse = sqrt(meanSquaredError);
% 
% disp(rmse);

%% Plots

% figure()
% plot(simout)
% hold on
% plot(simout1)
% legend('y reference','y1 when Q=diag(1.5,0,9,0,0.02), R=0.0001')
% xlabel('Simulation time [s]')
% ylabel('y [m]')
% title('Lateral position')
% 
% figure()
% plot(d1,'--')
% legend('y1 when Q=diag(1.5,0,9,0,0.02), R=0.0001')
% xlabel('Simulation time [s]')
% ylabel('delta [rad]')
% title('Steer Wheel Angle')
% 
% figure()
% plot(dd1,'--')
% legend('y1 when Q=diag(1.5,0,9,0,0.02), R=0.0001')
% xlabel('Simulation time [s]')
% ylabel('delta_dot [rad/s]')
% title('Steer Wheel Angle Rate')